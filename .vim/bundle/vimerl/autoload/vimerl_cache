{'erlang': [{'word': '(', 'kind': 'f', 'abbr': '!/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '*/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '+/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '++/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/1', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '-/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '--/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '//2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=/=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=:=/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '=</2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '==/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>/2', 'dup': 1}, {'word': '(', 'kind': 'f', 'abbr': '>=/2', 'dup': 1}, {'word': 'abs(', 'kind': 'f', 'abbr': 'abs(Float) -> float()', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32(Data) -> non_neg_integer()', 'dup': 1}, {'word': 'adler32(', 'kind': 'f', 'abbr': 'adler32(OldAdler, Data) -> non_neg_integer()', 'dup': 1}, {'word': 'adler32_combine(', 'kind': 'f', 'abbr': 'adler32_combine(FirstAdler, SecondAdler, SecondSize) -> non_neg_integer()', 'dup': 1}, {'word': 'alloc_info(', 'kind': 'f', 'abbr': 'alloc_info/1', 'dup': 1}, {'word': 'alloc_sizes(', 'kind': 'f', 'abbr': 'alloc_sizes/1', 'dup': 1}, {'word': 'and(', 'kind': 'f', 'abbr': 'and/2', 'dup': 1}, {'word': 'append(', 'kind': 'f', 'abbr': 'append(List, Tail) -> maybe_improper_list()', 'dup': 1}, {'word': 'append_element(', 'kind': 'f', 'abbr': 'append_element(Tuple1, Term) -> Tuple2', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Fun, Args) -> term()', 'dup': 1}, {'word': 'apply(', 'kind': 'f', 'abbr': 'apply(Module, Function, Args) -> term()', 'dup': 1}, {'word': 'atom_to_binary(', 'kind': 'f', 'abbr': 'atom_to_binary(Atom, Encoding) -> binary()', 'dup': 1}, {'word': 'atom_to_list(', 'kind': 'f', 'abbr': 'atom_to_list(Atom) -> string()', 'dup': 1}, {'word': 'await_proc_exit(', 'kind': 'f', 'abbr': 'await_proc_exit(Proc, Op, Data) -> term()', 'dup': 1}, {'word': 'await_sched_wall_time_modifications(', 'kind': 'f', 'abbr': 'await_sched_wall_time_modifications(Ref, Result) -> boolean()', 'dup': 1}, {'word': 'band(', 'kind': 'f', 'abbr': 'band/2', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part(Subject, PosLen) -> binary()', 'dup': 1}, {'word': 'binary_part(', 'kind': 'f', 'abbr': 'binary_part(Subject, Start, Length) -> binary()', 'dup': 1}, {'word': 'binary_to_atom(', 'kind': 'f', 'abbr': 'binary_to_atom(Binary, Encoding) -> atom()', 'dup': 1}, {'word': 'binary_to_existing_atom(', 'kind': 'f', 'abbr': 'binary_to_existing_atom(Binary, Encoding) -> atom()', 'dup': 1}, {'word': 'binary_to_float(', 'kind': 'f', 'abbr': 'binary_to_float(Binary) -> float()', 'dup': 1}, {'word': 'binary_to_integer(', 'kind': 'f', 'abbr': 'binary_to_integer(Binary) -> integer()', 'dup': 1}, {'word': 'binary_to_integer(', 'kind': 'f', 'abbr': 'binary_to_integer(Binary, Base) -> integer()', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list(Binary) -> [byte()]', 'dup': 1}, {'word': 'binary_to_list(', 'kind': 'f', 'abbr': 'binary_to_list(Binary, Start, Stop) -> [byte()]', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term(Binary) -> term()', 'dup': 1}, {'word': 'binary_to_term(', 'kind': 'f', 'abbr': 'binary_to_term(Binary, Opts) -> term()', 'dup': 1}, {'word': 'bit_size(', 'kind': 'f', 'abbr': 'bit_size(Bitstring) -> non_neg_integer()', 'dup': 1}, {'word': 'bitsize(', 'kind': 'f', 'abbr': 'bitsize(P1) -> non_neg_integer()', 'dup': 1}, {'word': 'bitstr_to_list(', 'kind': 'f', 'abbr': 'bitstr_to_list(P1) -> [byte() | bitstring()]', 'dup': 1}, {'word': 'bitstring_to_list(', 'kind': 'f', 'abbr': 'bitstring_to_list(Bitstring) -> [byte() | bitstring()]', 'dup': 1}, {'word': 'bnot(', 'kind': 'f', 'abbr': 'bnot/1', 'dup': 1}, {'word': 'bor(', 'kind': 'f', 'abbr': 'bor/2', 'dup': 1}, {'word': 'bsl(', 'kind': 'f', 'abbr': 'bsl/2', 'dup': 1}, {'word': 'bsr(', 'kind': 'f', 'abbr': 'bsr/2', 'dup': 1}, {'word': 'bump_reductions(', 'kind': 'f', 'abbr': 'bump_reductions(Reductions) -> true', 'dup': 1}, {'word': 'bxor(', 'kind': 'f', 'abbr': 'bxor/2', 'dup': 1}, {'word': 'byte_size(', 'kind': 'f', 'abbr': 'byte_size(Bitstring) -> non_neg_integer()', 'dup': 1}, {'word': 'call_on_load_function(', 'kind': 'f', 'abbr': 'call_on_load_function(P1) -> term()', 'dup': 1}, {'word': 'cancel_timer(', 'kind': 'f', 'abbr': 'cancel_timer(TimerRef) -> Time | false', 'dup': 1}, {'word': 'check_old_code(', 'kind': 'f', 'abbr': 'check_old_code(Module) -> boolean()', 'dup': 1}, {'word': 'check_process_code(', 'kind': 'f', 'abbr': 'check_process_code(Pid, Module) -> boolean()', 'dup': 1}, {'word': 'crasher(', 'kind': 'f', 'abbr': 'crasher/6', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32(Data) -> non_neg_integer()', 'dup': 1}, {'word': 'crc32(', 'kind': 'f', 'abbr': 'crc32(OldCrc, Data) -> non_neg_integer()', 'dup': 1}, {'word': 'crc32_combine(', 'kind': 'f', 'abbr': 'crc32_combine(FirstCrc, SecondCrc, SecondSize) -> non_neg_integer()', 'dup': 1}, {'word': 'date(', 'kind': 'f', 'abbr': 'date() -> Date', 'dup': 1}, {'word': 'decode_packet(', 'kind': 'f', 'abbr': 'decode_packet(Type, Bin, Options) -> {ok, Packet, Rest} | {more, Length} | {error, Reason}', 'dup': 1}, {'word': 'delay_trap(', 'kind': 'f', 'abbr': 'delay_trap(Result, Timeout) -> Result', 'dup': 1}, {'word': 'delete_element(', 'kind': 'f', 'abbr': 'delete_element(Index, Tuple1) -> Tuple2', 'dup': 1}, {'word': 'delete_module(', 'kind': 'f', 'abbr': 'delete_module(Module) -> true | undefined', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor(MonitorRef) -> true', 'dup': 1}, {'word': 'demonitor(', 'kind': 'f', 'abbr': 'demonitor(MonitorRef, OptionList) -> boolean()', 'dup': 1}, {'word': 'dexit(', 'kind': 'f', 'abbr': 'dexit/2', 'dup': 1}, {'word': 'dgroup_leader(', 'kind': 'f', 'abbr': 'dgroup_leader/2', 'dup': 1}, {'word': 'disconnect_node(', 'kind': 'f', 'abbr': 'disconnect_node(Node) -> boolean() | ignored', 'dup': 1}, {'word': 'display(', 'kind': 'f', 'abbr': 'display(Term) -> true', 'dup': 1}, {'word': 'display_nl(', 'kind': 'f', 'abbr': 'display_nl() -> true', 'dup': 1}, {'word': 'display_string(', 'kind': 'f', 'abbr': 'display_string(P1) -> true', 'dup': 1}, {'word': 'dist_exit(', 'kind': 'f', 'abbr': 'dist_exit(P1, P2, P3) -> true', 'dup': 1}, {'word': 'div(', 'kind': 'f', 'abbr': 'div/2', 'dup': 1}, {'word': 'dlink(', 'kind': 'f', 'abbr': 'dlink(Pid) -> true', 'dup': 1}, {'word': 'dmonitor_node(', 'kind': 'f', 'abbr': 'dmonitor_node/3', 'dup': 1}, {'word': 'dmonitor_p(', 'kind': 'f', 'abbr': 'dmonitor_p(X1, ProcSpec) -> reference()', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/3', 'dup': 1}, {'word': 'dsend(', 'kind': 'f', 'abbr': 'dsend/2', 'dup': 1}, {'word': 'dt_append_vm_tag_data(', 'kind': 'f', 'abbr': 'dt_append_vm_tag_data(IoData) -> IoDataRet', 'dup': 1}, {'word': 'dt_get_tag(', 'kind': 'f', 'abbr': 'dt_get_tag() -> binary() | undefined', 'dup': 1}, {'word': 'dt_get_tag_data(', 'kind': 'f', 'abbr': 'dt_get_tag_data() -> binary() | undefined', 'dup': 1}, {'word': 'dt_prepend_vm_tag_data(', 'kind': 'f', 'abbr': 'dt_prepend_vm_tag_data(IoData) -> IoDataRet', 'dup': 1}, {'word': 'dt_put_tag(', 'kind': 'f', 'abbr': 'dt_put_tag(IoData) -> binary() | undefined', 'dup': 1}, {'word': 'dt_restore_tag(', 'kind': 'f', 'abbr': 'dt_restore_tag(TagData) -> true', 'dup': 1}, {'word': 'dt_spread_tag(', 'kind': 'f', 'abbr': 'dt_spread_tag(Bool) -> TagData', 'dup': 1}, {'word': 'dunlink(', 'kind': 'f', 'abbr': 'dunlink(Pid) -> true', 'dup': 1}, {'word': 'element(', 'kind': 'f', 'abbr': 'element(N, Tuple) -> term()', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase() -> [{Key, Val}]', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase(Key) -> Val | undefined', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error(Reason) -> no_return()', 'dup': 1}, {'word': 'error(', 'kind': 'f', 'abbr': 'error(Reason, Args) -> no_return()', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit(Reason) -> no_return()', 'dup': 1}, {'word': 'exit(', 'kind': 'f', 'abbr': 'exit(Pid, Reason) -> true', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size(Term) -> non_neg_integer()', 'dup': 1}, {'word': 'external_size(', 'kind': 'f', 'abbr': 'external_size(Term, Options) -> non_neg_integer()', 'dup': 1}, {'word': 'finish_after_on_load(', 'kind': 'f', 'abbr': 'finish_after_on_load(P1, P2) -> true', 'dup': 1}, {'word': 'finish_loading(', 'kind': 'f', 'abbr': 'finish_loading(PreparedCodeBinaries) -> ok | Error', 'dup': 1}, {'word': 'float(', 'kind': 'f', 'abbr': 'float(Number) -> float()', 'dup': 1}, {'word': 'float_to_binary(', 'kind': 'f', 'abbr': 'float_to_binary(Float) -> binary()', 'dup': 1}, {'word': 'float_to_binary(', 'kind': 'f', 'abbr': 'float_to_binary(Float, Options) -> binary()', 'dup': 1}, {'word': 'float_to_list(', 'kind': 'f', 'abbr': 'float_to_list(Float) -> string()', 'dup': 1}, {'word': 'float_to_list(', 'kind': 'f', 'abbr': 'float_to_list(Float, Options) -> string()', 'dup': 1}, {'word': 'flush_monitor_message(', 'kind': 'f', 'abbr': 'flush_monitor_message/2', 'dup': 1}, {'word': 'format_cpu_topology(', 'kind': 'f', 'abbr': 'format_cpu_topology/1', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info(Fun, Item) -> {Item, Info}', 'dup': 1}, {'word': 'fun_info(', 'kind': 'f', 'abbr': 'fun_info(Fun) -> [{Item, Info}]', 'dup': 1}, {'word': 'fun_to_list(', 'kind': 'f', 'abbr': 'fun_to_list(Fun) -> string()', 'dup': 1}, {'word': 'function_exported(', 'kind': 'f', 'abbr': 'function_exported(Module, Function, Arity) -> boolean()', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect() -> true', 'dup': 1}, {'word': 'garbage_collect(', 'kind': 'f', 'abbr': 'garbage_collect(Pid) -> boolean()', 'dup': 1}, {'word': 'garbage_collect_message_area(', 'kind': 'f', 'abbr': 'garbage_collect_message_area() -> boolean()', 'dup': 1}, {'word': 'gather_gc_info_result(', 'kind': 'f', 'abbr': 'gather_gc_info_result(Ref) -> {number(), number(), 0}', 'dup': 1}, {'word': 'gather_sched_wall_time_result(', 'kind': 'f', 'abbr': 'gather_sched_wall_time_result(Ref) -> [{pos_integer(), non_neg_integer(), non_neg_integer()}]', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get() -> [{Key, Val}]', 'dup': 1}, {'word': 'get(', 'kind': 'f', 'abbr': 'get(Key) -> Val | undefined', 'dup': 1}, {'word': 'get_cookie(', 'kind': 'f', 'abbr': 'get_cookie() -> Cookie | nocookie', 'dup': 1}, {'word': 'get_keys(', 'kind': 'f', 'abbr': 'get_keys(Val) -> [Key]', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info(P1) -> [{atom(), [{atom(), term()}]}]', 'dup': 1}, {'word': 'get_module_info(', 'kind': 'f', 'abbr': 'get_module_info(Module, Item) -> ModuleInfo', 'dup': 1}, {'word': 'get_stacktrace(', 'kind': 'f', 'abbr': 'get_stacktrace() -> [stack_item()]', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader() -> pid()', 'dup': 1}, {'word': 'group_leader(', 'kind': 'f', 'abbr': 'group_leader(GroupLeader, Pid) -> true', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt() -> no_return()', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt(Status) -> no_return()', 'dup': 1}, {'word': 'halt(', 'kind': 'f', 'abbr': 'halt(Status, Options) -> no_return()', 'dup': 1}, {'word': 'hash(', 'kind': 'f', 'abbr': 'hash(Term, Range) -> pos_integer()', 'dup': 1}, {'word': 'hd(', 'kind': 'f', 'abbr': 'hd(List) -> term()', 'dup': 1}, {'word': 'hibernate(', 'kind': 'f', 'abbr': 'hibernate(Module, Function, Args) -> no_return()', 'dup': 1}, {'word': 'insert_element(', 'kind': 'f', 'abbr': 'insert_element(Index, Tuple1, Term) -> Tuple2', 'dup': 1}, {'word': 'integer_to_binary(', 'kind': 'f', 'abbr': 'integer_to_binary(Integer) -> binary()', 'dup': 1}, {'word': 'integer_to_binary(', 'kind': 'f', 'abbr': 'integer_to_binary(Integer, Base) -> binary()', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list(Integer) -> string()', 'dup': 1}, {'word': 'integer_to_list(', 'kind': 'f', 'abbr': 'integer_to_list(Integer, Base) -> string()', 'dup': 1}, {'word': 'iolist_size(', 'kind': 'f', 'abbr': 'iolist_size(Item) -> non_neg_integer()', 'dup': 1}, {'word': 'iolist_to_binary(', 'kind': 'f', 'abbr': 'iolist_to_binary(IoListOrBinary) -> binary()', 'dup': 1}, {'word': 'is_alive(', 'kind': 'f', 'abbr': 'is_alive() -> boolean()', 'dup': 1}, {'word': 'is_atom(', 'kind': 'f', 'abbr': 'is_atom(Term) -> boolean()', 'dup': 1}, {'word': 'is_binary(', 'kind': 'f', 'abbr': 'is_binary(Term) -> boolean()', 'dup': 1}, {'word': 'is_bitstring(', 'kind': 'f', 'abbr': 'is_bitstring(Term) -> boolean()', 'dup': 1}, {'word': 'is_boolean(', 'kind': 'f', 'abbr': 'is_boolean(Term) -> boolean()', 'dup': 1}, {'word': 'is_builtin(', 'kind': 'f', 'abbr': 'is_builtin(Module, Function, Arity) -> boolean()', 'dup': 1}, {'word': 'is_float(', 'kind': 'f', 'abbr': 'is_float(Term) -> boolean()', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function(Term) -> boolean()', 'dup': 1}, {'word': 'is_function(', 'kind': 'f', 'abbr': 'is_function(Term, Arity) -> boolean()', 'dup': 1}, {'word': 'is_integer(', 'kind': 'f', 'abbr': 'is_integer(Term) -> boolean()', 'dup': 1}, {'word': 'is_list(', 'kind': 'f', 'abbr': 'is_list(Term) -> boolean()', 'dup': 1}, {'word': 'is_number(', 'kind': 'f', 'abbr': 'is_number(Term) -> boolean()', 'dup': 1}, {'word': 'is_pid(', 'kind': 'f', 'abbr': 'is_pid(Term) -> boolean()', 'dup': 1}, {'word': 'is_port(', 'kind': 'f', 'abbr': 'is_port(Term) -> boolean()', 'dup': 1}, {'word': 'is_process_alive(', 'kind': 'f', 'abbr': 'is_process_alive(Pid) -> boolean()', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record(Term, RecordTag) -> boolean()', 'dup': 1}, {'word': 'is_record(', 'kind': 'f', 'abbr': 'is_record(Term, RecordTag, Size) -> boolean()', 'dup': 1}, {'word': 'is_reference(', 'kind': 'f', 'abbr': 'is_reference(Term) -> boolean()', 'dup': 1}, {'word': 'is_tuple(', 'kind': 'f', 'abbr': 'is_tuple(Term) -> boolean()', 'dup': 1}, {'word': 'length(', 'kind': 'f', 'abbr': 'length(List) -> non_neg_integer()', 'dup': 1}, {'word': 'link(', 'kind': 'f', 'abbr': 'link(PidOrPort) -> true', 'dup': 1}, {'word': 'list_to_atom(', 'kind': 'f', 'abbr': 'list_to_atom(String) -> atom()', 'dup': 1}, {'word': 'list_to_binary(', 'kind': 'f', 'abbr': 'list_to_binary(IoList) -> binary()', 'dup': 1}, {'word': 'list_to_bitstr(', 'kind': 'f', 'abbr': 'list_to_bitstr(P1) -> bitstring()', 'dup': 1}, {'word': 'list_to_bitstring(', 'kind': 'f', 'abbr': 'list_to_bitstring(BitstringList) -> bitstring()', 'dup': 1}, {'word': 'list_to_existing_atom(', 'kind': 'f', 'abbr': 'list_to_existing_atom(String) -> atom()', 'dup': 1}, {'word': 'list_to_float(', 'kind': 'f', 'abbr': 'list_to_float(String) -> float()', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer(String) -> integer()', 'dup': 1}, {'word': 'list_to_integer(', 'kind': 'f', 'abbr': 'list_to_integer(String, Base) -> integer()', 'dup': 1}, {'word': 'list_to_pid(', 'kind': 'f', 'abbr': 'list_to_pid(String) -> pid()', 'dup': 1}, {'word': 'list_to_tuple(', 'kind': 'f', 'abbr': 'list_to_tuple(List) -> tuple()', 'dup': 1}, {'word': 'load_module(', 'kind': 'f', 'abbr': 'load_module(Module, Binary) -> {module, Module} | {error, Reason}', 'dup': 1}, {'word': 'load_nif(', 'kind': 'f', 'abbr': 'load_nif(Path, LoadInfo) -> ok | Error', 'dup': 1}, {'word': 'loaded(', 'kind': 'f', 'abbr': 'loaded() -> [Module]', 'dup': 1}, {'word': 'localtime(', 'kind': 'f', 'abbr': 'localtime() -> DateTime', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime(Localtime, IsDst) -> Universaltime', 'dup': 1}, {'word': 'localtime_to_universaltime(', 'kind': 'f', 'abbr': 'localtime_to_universaltime(Localtime) -> Universaltime', 'dup': 1}, {'word': 'make_fun(', 'kind': 'f', 'abbr': 'make_fun(Module, Function, Arity) -> function()', 'dup': 1}, {'word': 'make_ref(', 'kind': 'f', 'abbr': 'make_ref() -> reference()', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple(Arity, InitialValue) -> tuple()', 'dup': 1}, {'word': 'make_tuple(', 'kind': 'f', 'abbr': 'make_tuple(Arity, DefaultValue, InitList) -> tuple()', 'dup': 1}, {'word': 'match_spec_test(', 'kind': 'f', 'abbr': 'match_spec_test(P1, P2, P3) -> TestResult', 'dup': 1}, {'word': 'max(', 'kind': 'f', 'abbr': 'max(Term1, Term2) -> Maximum', 'dup': 1}, {'word': 'md5(', 'kind': 'f', 'abbr': 'md5(Data) -> Digest', 'dup': 1}, {'word': 'md5_final(', 'kind': 'f', 'abbr': 'md5_final(Context) -> Digest', 'dup': 1}, {'word': 'md5_init(', 'kind': 'f', 'abbr': 'md5_init() -> Context', 'dup': 1}, {'word': 'md5_update(', 'kind': 'f', 'abbr': 'md5_update(Context, Data) -> NewContext', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory() -> [{Type, Size}]', 'dup': 1}, {'word': 'memory(', 'kind': 'f', 'abbr': 'memory(Type) -> non_neg_integer()', 'dup': 1}, {'word': 'min(', 'kind': 'f', 'abbr': 'min(Term1, Term2) -> Minimum', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'module_loaded(', 'kind': 'f', 'abbr': 'module_loaded(Module) -> boolean()', 'dup': 1}, {'word': 'monitor(', 'kind': 'f', 'abbr': 'monitor(Type, Item) -> MonitorRef', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node(Node, Flag) -> true', 'dup': 1}, {'word': 'monitor_node(', 'kind': 'f', 'abbr': 'monitor_node(Node, Flag, Options) -> true', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error(Reason) -> no_return()', 'dup': 1}, {'word': 'nif_error(', 'kind': 'f', 'abbr': 'nif_error(Reason, Args) -> no_return()', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node() -> Node', 'dup': 1}, {'word': 'node(', 'kind': 'f', 'abbr': 'node(Arg) -> Node', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes(Arg) -> Nodes', 'dup': 1}, {'word': 'nodes(', 'kind': 'f', 'abbr': 'nodes() -> Nodes', 'dup': 1}, {'word': 'not(', 'kind': 'f', 'abbr': 'not/1', 'dup': 1}, {'word': 'now(', 'kind': 'f', 'abbr': 'now() -> Timestamp', 'dup': 1}, {'word': 'open_port(', 'kind': 'f', 'abbr': 'open_port(PortName, PortSettings) -> port()', 'dup': 1}, {'word': 'or(', 'kind': 'f', 'abbr': 'or/2', 'dup': 1}, {'word': 'phash(', 'kind': 'f', 'abbr': 'phash(Term, Range) -> Hash', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2(Term) -> Hash', 'dup': 1}, {'word': 'phash2(', 'kind': 'f', 'abbr': 'phash2(Term, Range) -> Hash', 'dup': 1}, {'word': 'pid_to_list(', 'kind': 'f', 'abbr': 'pid_to_list(Pid) -> string()', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call(Port, Data) -> term()', 'dup': 1}, {'word': 'port_call(', 'kind': 'f', 'abbr': 'port_call(Port, Operation, Data) -> term()', 'dup': 1}, {'word': 'port_close(', 'kind': 'f', 'abbr': 'port_close(Port) -> true', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command(Port, Data) -> true', 'dup': 1}, {'word': 'port_command(', 'kind': 'f', 'abbr': 'port_command(Port, Data, OptionList) -> boolean()', 'dup': 1}, {'word': 'port_connect(', 'kind': 'f', 'abbr': 'port_connect(Port, Pid) -> true', 'dup': 1}, {'word': 'port_control(', 'kind': 'f', 'abbr': 'port_control(Port, Operation, Data) -> iodata() | binary()', 'dup': 1}, {'word': 'port_get_data(', 'kind': 'f', 'abbr': 'port_get_data(Port) -> term()', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info(Port) -> Result', 'dup': 1}, {'word': 'port_info(', 'kind': 'f', 'abbr': 'port_info(Port, Item) -> {connected, Pid} | undefined', 'dup': 1}, {'word': 'port_set_data(', 'kind': 'f', 'abbr': 'port_set_data(Port, Data) -> true', 'dup': 1}, {'word': 'port_to_list(', 'kind': 'f', 'abbr': 'port_to_list(Port) -> string()', 'dup': 1}, {'word': 'ports(', 'kind': 'f', 'abbr': 'ports() -> [port()]', 'dup': 1}, {'word': 'posixtime_to_universaltime(', 'kind': 'f', 'abbr': 'posixtime_to_universaltime(P1) -> {date(), time()}', 'dup': 1}, {'word': 'pre_loaded(', 'kind': 'f', 'abbr': 'pre_loaded() -> [module()]', 'dup': 1}, {'word': 'prepare_loading(', 'kind': 'f', 'abbr': 'prepare_loading(Module, Code) -> PreparedCode | {error, Reason}', 'dup': 1}, {'word': 'process_display(', 'kind': 'f', 'abbr': 'process_display(Pid, Type) -> true', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag(Pid, Flag, Value) -> OldValue', 'dup': 1}, {'word': 'process_flag(', 'kind': 'f', 'abbr': 'process_flag(Flag, Boolean) -> OldBoolean', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info(Pid) -> Info', 'dup': 1}, {'word': 'process_info(', 'kind': 'f', 'abbr': 'process_info(Pid, Item) -> InfoTuple | [] | undefined', 'dup': 1}, {'word': 'processes(', 'kind': 'f', 'abbr': 'processes() -> [pid()]', 'dup': 1}, {'word': 'purge_module(', 'kind': 'f', 'abbr': 'purge_module(Module) -> true', 'dup': 1}, {'word': 'put(', 'kind': 'f', 'abbr': 'put(Key, Val) -> term()', 'dup': 1}, {'word': 'raise(', 'kind': 'f', 'abbr': 'raise(Class, Reason, Stacktrace) -> no_return()', 'dup': 1}, {'word': 'read_timer(', 'kind': 'f', 'abbr': 'read_timer(TimerRef) -> non_neg_integer() | false', 'dup': 1}, {'word': 'ref_to_list(', 'kind': 'f', 'abbr': 'ref_to_list(Ref) -> string()', 'dup': 1}, {'word': 'register(', 'kind': 'f', 'abbr': 'register(RegName, PidOrPort) -> true', 'dup': 1}, {'word': 'registered(', 'kind': 'f', 'abbr': 'registered() -> [RegName]', 'dup': 1}, {'word': 'rem(', 'kind': 'f', 'abbr': 'rem/2', 'dup': 1}, {'word': 'resume_process(', 'kind': 'f', 'abbr': 'resume_process(Suspendee) -> true', 'dup': 1}, {'word': 'round(', 'kind': 'f', 'abbr': 'round(Number) -> integer()', 'dup': 1}, {'word': 'self(', 'kind': 'f', 'abbr': 'self() -> pid()', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send(Dest, Msg) -> Msg', 'dup': 1}, {'word': 'send(', 'kind': 'f', 'abbr': 'send(Dest, Msg, Options) -> Res', 'dup': 1}, {'word': 'send_after(', 'kind': 'f', 'abbr': 'send_after(Time, Dest, Msg) -> TimerRef', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg) -> boolean()', 'dup': 1}, {'word': 'send_nosuspend(', 'kind': 'f', 'abbr': 'send_nosuspend(Dest, Msg, Options) -> boolean()', 'dup': 1}, {'word': 'seq_trace(', 'kind': 'f', 'abbr': 'seq_trace(P1, P2) -> seq_trace_info_returns() | {term(), term(), term(), term(), term()}', 'dup': 1}, {'word': 'seq_trace_info(', 'kind': 'f', 'abbr': 'seq_trace_info(What) -> {send, boolean()}', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print(P1) -> boolean()', 'dup': 1}, {'word': 'seq_trace_print(', 'kind': 'f', 'abbr': 'seq_trace_print(P1, P2) -> boolean()', 'dup': 1}, {'word': 'set_cookie(', 'kind': 'f', 'abbr': 'set_cookie(Node, Cookie) -> true', 'dup': 1}, {'word': 'set_cpu_topology(', 'kind': 'f', 'abbr': 'set_cpu_topology/1', 'dup': 1}, {'word': 'setelement(', 'kind': 'f', 'abbr': 'setelement(Index, Tuple1, Value) -> Tuple2', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode(P1, P2) -> true', 'dup': 1}, {'word': 'setnode(', 'kind': 'f', 'abbr': 'setnode(P1, P2, P3) -> true', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size(Item) -> non_neg_integer()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn(', 'kind': 'f', 'abbr': 'spawn(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Fun) -> pid()', 'dup': 1}, {'word': 'spawn_link(', 'kind': 'f', 'abbr': 'spawn_link(Node, Module, Function, Args) -> pid()', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Fun) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_monitor(', 'kind': 'f', 'abbr': 'spawn_monitor(Module, Function, Args) -> {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Tuple) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Node, Fun, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Module, Function, Args, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'spawn_opt(', 'kind': 'f', 'abbr': 'spawn_opt(Node, Module, Function, Args, Options) -> pid() | {pid(), reference()}', 'dup': 1}, {'word': 'split_binary(', 'kind': 'f', 'abbr': 'split_binary(Bin, Pos) -> {binary(), binary()}', 'dup': 1}, {'word': 'start_timer(', 'kind': 'f', 'abbr': 'start_timer(Time, Dest, Msg) -> TimerRef', 'dup': 1}, {'word': 'statistics(', 'kind': 'f', 'abbr': 'statistics(Item) -> {ContextSwitches, 0}', 'dup': 1}, {'word': 'subtract(', 'kind': 'f', 'abbr': 'subtract(X1, X2) -> [term()]', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process(Suspendee, OptList) -> boolean()', 'dup': 1}, {'word': 'suspend_process(', 'kind': 'f', 'abbr': 'suspend_process(Suspendee) -> true', 'dup': 1}, {'word': 'system_flag(', 'kind': 'f', 'abbr': 'system_flag(Flag, Depth) -> OldDepth', 'dup': 1}, {'word': 'system_info(', 'kind': 'f', 'abbr': 'system_info(Item) -> [tuple()]', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor() -> MonSettings', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor(Arg) -> MonSettings', 'dup': 1}, {'word': 'system_monitor(', 'kind': 'f', 'abbr': 'system_monitor(MonitorPid, Options) -> MonSettings', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile() -> ProfilerSettings', 'dup': 1}, {'word': 'system_profile(', 'kind': 'f', 'abbr': 'system_profile(ProfilerPid, Options) -> ProfilerSettings', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary(Term) -> ext_binary()', 'dup': 1}, {'word': 'term_to_binary(', 'kind': 'f', 'abbr': 'term_to_binary(Term, Options) -> ext_binary()', 'dup': 1}, {'word': 'throw(', 'kind': 'f', 'abbr': 'throw(Any) -> no_return()', 'dup': 1}, {'word': 'time(', 'kind': 'f', 'abbr': 'time() -> Time', 'dup': 1}, {'word': 'tl(', 'kind': 'f', 'abbr': 'tl(List) -> term()', 'dup': 1}, {'word': 'trace(', 'kind': 'f', 'abbr': 'trace(PidSpec, How, FlagList) -> integer()', 'dup': 1}, {'word': 'trace_delivered(', 'kind': 'f', 'abbr': 'trace_delivered(Tracee) -> Ref', 'dup': 1}, {'word': 'trace_info(', 'kind': 'f', 'abbr': 'trace_info(PidOrFunc, Item) -> Res', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern(MFA, MatchSpec) -> non_neg_integer()', 'dup': 1}, {'word': 'trace_pattern(', 'kind': 'f', 'abbr': 'trace_pattern(MFA, MatchSpec, FlagList) -> non_neg_integer()', 'dup': 1}, {'word': 'trunc(', 'kind': 'f', 'abbr': 'trunc(Number) -> integer()', 'dup': 1}, {'word': 'tuple_size(', 'kind': 'f', 'abbr': 'tuple_size(Tuple) -> non_neg_integer()', 'dup': 1}, {'word': 'tuple_to_list(', 'kind': 'f', 'abbr': 'tuple_to_list(Tuple) -> [term()]', 'dup': 1}, {'word': 'universaltime(', 'kind': 'f', 'abbr': 'universaltime() -> DateTime', 'dup': 1}, {'word': 'universaltime_to_localtime(', 'kind': 'f', 'abbr': 'universaltime_to_localtime(Universaltime) -> Localtime', 'dup': 1}, {'word': 'universaltime_to_posixtime(', 'kind': 'f', 'abbr': 'universaltime_to_posixtime(P1) -> integer()', 'dup': 1}, {'word': 'unlink(', 'kind': 'f', 'abbr': 'unlink(Id) -> true', 'dup': 1}, {'word': 'unregister(', 'kind': 'f', 'abbr': 'unregister(RegName) -> true', 'dup': 1}, {'word': 'whereis(', 'kind': 'f', 'abbr': 'whereis(RegName) -> pid() | port() | undefined', 'dup': 1}, {'word': 'xor(', 'kind': 'f', 'abbr': 'xor/2', 'dup': 1}, {'word': 'yield(', 'kind': 'f', 'abbr': 'yield() -> true', 'dup': 1}]}
{'dict': [{'word': 'append(', 'kind': 'f', 'abbr': 'append(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'append_list(', 'kind': 'f', 'abbr': 'append_list(Key, ValList, Dict1) -> Dict2', 'dup': 1}, {'word': 'erase(', 'kind': 'f', 'abbr': 'erase(Key, Dict1) -> Dict2', 'dup': 1}, {'word': 'fetch(', 'kind': 'f', 'abbr': 'fetch(Key, Dict) -> Value', 'dup': 1}, {'word': 'fetch_keys(', 'kind': 'f', 'abbr': 'fetch_keys(Dict) -> Keys', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Pred, Dict1) -> Dict2', 'dup': 1}, {'word': 'find(', 'kind': 'f', 'abbr': 'find(Key, Dict) -> {ok, Value} | error', 'dup': 1}, {'word': 'fold(', 'kind': 'f', 'abbr': 'fold(Fun, Acc0, Dict) -> Acc1', 'dup': 1}, {'word': 'from_list(', 'kind': 'f', 'abbr': 'from_list(List) -> Dict', 'dup': 1}, {'word': 'is_key(', 'kind': 'f', 'abbr': 'is_key(Key, Dict) -> boolean()', 'dup': 1}, {'word': 'map(', 'kind': 'f', 'abbr': 'map(Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'merge(', 'kind': 'f', 'abbr': 'merge(Fun, Dict1, Dict2) -> Dict3', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new() -> dict()', 'dup': 1}, {'word': 'size(', 'kind': 'f', 'abbr': 'size(Dict) -> non_neg_integer()', 'dup': 1}, {'word': 'store(', 'kind': 'f', 'abbr': 'store(Key, Value, Dict1) -> Dict2', 'dup': 1}, {'word': 'to_list(', 'kind': 'f', 'abbr': 'to_list(Dict) -> List', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Dict1) -> Dict2', 'dup': 1}, {'word': 'update(', 'kind': 'f', 'abbr': 'update(Key, Fun, Initial, Dict1) -> Dict2', 'dup': 1}, {'word': 'update_counter(', 'kind': 'f', 'abbr': 'update_counter(Key, Increment, Dict1) -> Dict2', 'dup': 1}]}
{'mnesia': [{'word': 'abort(', 'kind': 'f', 'abbr': 'abort(Reason) -> no_return()', 'dup': 1}, {'word': 'activate_checkpoint(', 'kind': 'f', 'abbr': 'activate_checkpoint/1', 'dup': 1}, {'word': 'activity(', 'kind': 'f', 'abbr': 'activity/2', 'dup': 1}, {'word': 'activity(', 'kind': 'f', 'abbr': 'activity/3', 'dup': 1}, {'word': 'activity(', 'kind': 'f', 'abbr': 'activity/4', 'dup': 1}, {'word': 'add_table_copy(', 'kind': 'f', 'abbr': 'add_table_copy/3', 'dup': 1}, {'word': 'add_table_index(', 'kind': 'f', 'abbr': 'add_table_index/2', 'dup': 1}, {'word': 'all_keys(', 'kind': 'f', 'abbr': 'all_keys/1', 'dup': 1}, {'word': 'all_keys(', 'kind': 'f', 'abbr': 'all_keys/4', 'dup': 1}, {'word': 'async_dirty(', 'kind': 'f', 'abbr': 'async_dirty/1', 'dup': 1}, {'word': 'async_dirty(', 'kind': 'f', 'abbr': 'async_dirty/2', 'dup': 1}, {'word': 'backup(', 'kind': 'f', 'abbr': 'backup/1', 'dup': 1}, {'word': 'backup(', 'kind': 'f', 'abbr': 'backup/2', 'dup': 1}, {'word': 'backup_checkpoint(', 'kind': 'f', 'abbr': 'backup_checkpoint/2', 'dup': 1}, {'word': 'backup_checkpoint(', 'kind': 'f', 'abbr': 'backup_checkpoint/3', 'dup': 1}, {'word': 'change_config(', 'kind': 'f', 'abbr': 'change_config/2', 'dup': 1}, {'word': 'change_table_access_mode(', 'kind': 'f', 'abbr': 'change_table_access_mode/2', 'dup': 1}, {'word': 'change_table_copy_type(', 'kind': 'f', 'abbr': 'change_table_copy_type/3', 'dup': 1}, {'word': 'change_table_frag(', 'kind': 'f', 'abbr': 'change_table_frag/2', 'dup': 1}, {'word': 'change_table_load_order(', 'kind': 'f', 'abbr': 'change_table_load_order/2', 'dup': 1}, {'word': 'change_table_majority(', 'kind': 'f', 'abbr': 'change_table_majority/2', 'dup': 1}, {'word': 'clear_table(', 'kind': 'f', 'abbr': 'clear_table/1', 'dup': 1}, {'word': 'clear_table(', 'kind': 'f', 'abbr': 'clear_table/4', 'dup': 1}, {'word': 'create_schema(', 'kind': 'f', 'abbr': 'create_schema/1', 'dup': 1}, {'word': 'create_table(', 'kind': 'f', 'abbr': 'create_table/1', 'dup': 1}, {'word': 'create_table(', 'kind': 'f', 'abbr': 'create_table/2', 'dup': 1}, {'word': 'deactivate_checkpoint(', 'kind': 'f', 'abbr': 'deactivate_checkpoint/1', 'dup': 1}, {'word': 'del_table_copy(', 'kind': 'f', 'abbr': 'del_table_copy/2', 'dup': 1}, {'word': 'del_table_index(', 'kind': 'f', 'abbr': 'del_table_index/2', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete/1', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete/3', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete/5', 'dup': 1}, {'word': 'delete_object(', 'kind': 'f', 'abbr': 'delete_object/1', 'dup': 1}, {'word': 'delete_object(', 'kind': 'f', 'abbr': 'delete_object/3', 'dup': 1}, {'word': 'delete_object(', 'kind': 'f', 'abbr': 'delete_object/5', 'dup': 1}, {'word': 'delete_schema(', 'kind': 'f', 'abbr': 'delete_schema/1', 'dup': 1}, {'word': 'delete_table(', 'kind': 'f', 'abbr': 'delete_table/1', 'dup': 1}, {'word': 'delete_table_property(', 'kind': 'f', 'abbr': 'delete_table_property/2', 'dup': 1}, {'word': 'dirty_all_keys(', 'kind': 'f', 'abbr': 'dirty_all_keys/1', 'dup': 1}, {'word': 'dirty_delete(', 'kind': 'f', 'abbr': 'dirty_delete/1', 'dup': 1}, {'word': 'dirty_delete(', 'kind': 'f', 'abbr': 'dirty_delete/2', 'dup': 1}, {'word': 'dirty_delete_object(', 'kind': 'f', 'abbr': 'dirty_delete_object/1', 'dup': 1}, {'word': 'dirty_delete_object(', 'kind': 'f', 'abbr': 'dirty_delete_object/2', 'dup': 1}, {'word': 'dirty_first(', 'kind': 'f', 'abbr': 'dirty_first/1', 'dup': 1}, {'word': 'dirty_index_match_object(', 'kind': 'f', 'abbr': 'dirty_index_match_object/2', 'dup': 1}, {'word': 'dirty_index_match_object(', 'kind': 'f', 'abbr': 'dirty_index_match_object/3', 'dup': 1}, {'word': 'dirty_index_read(', 'kind': 'f', 'abbr': 'dirty_index_read/3', 'dup': 1}, {'word': 'dirty_last(', 'kind': 'f', 'abbr': 'dirty_last/1', 'dup': 1}, {'word': 'dirty_match_object(', 'kind': 'f', 'abbr': 'dirty_match_object/1', 'dup': 1}, {'word': 'dirty_match_object(', 'kind': 'f', 'abbr': 'dirty_match_object/2', 'dup': 1}, {'word': 'dirty_next(', 'kind': 'f', 'abbr': 'dirty_next/2', 'dup': 1}, {'word': 'dirty_prev(', 'kind': 'f', 'abbr': 'dirty_prev/2', 'dup': 1}, {'word': 'dirty_read(', 'kind': 'f', 'abbr': 'dirty_read/1', 'dup': 1}, {'word': 'dirty_read(', 'kind': 'f', 'abbr': 'dirty_read/2', 'dup': 1}, {'word': 'dirty_rpc(', 'kind': 'f', 'abbr': 'dirty_rpc/4', 'dup': 1}, {'word': 'dirty_sel_init(', 'kind': 'f', 'abbr': 'dirty_sel_init/5', 'dup': 1}, {'word': 'dirty_select(', 'kind': 'f', 'abbr': 'dirty_select/2', 'dup': 1}, {'word': 'dirty_slot(', 'kind': 'f', 'abbr': 'dirty_slot/2', 'dup': 1}, {'word': 'dirty_update_counter(', 'kind': 'f', 'abbr': 'dirty_update_counter/2', 'dup': 1}, {'word': 'dirty_update_counter(', 'kind': 'f', 'abbr': 'dirty_update_counter/3', 'dup': 1}, {'word': 'dirty_write(', 'kind': 'f', 'abbr': 'dirty_write/1', 'dup': 1}, {'word': 'dirty_write(', 'kind': 'f', 'abbr': 'dirty_write/2', 'dup': 1}, {'word': 'dump_log(', 'kind': 'f', 'abbr': 'dump_log/0', 'dup': 1}, {'word': 'dump_tables(', 'kind': 'f', 'abbr': 'dump_tables/1', 'dup': 1}, {'word': 'dump_to_textfile(', 'kind': 'f', 'abbr': 'dump_to_textfile/1', 'dup': 1}, {'word': 'error_description(', 'kind': 'f', 'abbr': 'error_description/1', 'dup': 1}, {'word': 'ets(', 'kind': 'f', 'abbr': 'ets/1', 'dup': 1}, {'word': 'ets(', 'kind': 'f', 'abbr': 'ets/2', 'dup': 1}, {'word': 'first(', 'kind': 'f', 'abbr': 'first/1', 'dup': 1}, {'word': 'first(', 'kind': 'f', 'abbr': 'first/3', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl/3', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl/4', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl/6', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr/3', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr/4', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr/6', 'dup': 1}, {'word': 'force_load_table(', 'kind': 'f', 'abbr': 'force_load_table/1', 'dup': 1}, {'word': 'fun_select(', 'kind': 'f', 'abbr': 'fun_select/7', 'dup': 1}, {'word': 'fun_select(', 'kind': 'f', 'abbr': 'fun_select/10', 'dup': 1}, {'word': 'get_activity_id(', 'kind': 'f', 'abbr': 'get_activity_id/0', 'dup': 1}, {'word': 'has_var(', 'kind': 'f', 'abbr': 'has_var/1', 'dup': 1}, {'word': 'index_match_object(', 'kind': 'f', 'abbr': 'index_match_object/2', 'dup': 1}, {'word': 'index_match_object(', 'kind': 'f', 'abbr': 'index_match_object/4', 'dup': 1}, {'word': 'index_match_object(', 'kind': 'f', 'abbr': 'index_match_object/6', 'dup': 1}, {'word': 'index_read(', 'kind': 'f', 'abbr': 'index_read/3', 'dup': 1}, {'word': 'index_read(', 'kind': 'f', 'abbr': 'index_read/6', 'dup': 1}, {'word': 'info(', 'kind': 'f', 'abbr': 'info/0', 'dup': 1}, {'word': 'install_fallback(', 'kind': 'f', 'abbr': 'install_fallback/1', 'dup': 1}, {'word': 'install_fallback(', 'kind': 'f', 'abbr': 'install_fallback/2', 'dup': 1}, {'word': 'is_transaction(', 'kind': 'f', 'abbr': 'is_transaction/0', 'dup': 1}, {'word': 'kill(', 'kind': 'f', 'abbr': 'kill/0', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last/1', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last/3', 'dup': 1}, {'word': 'lkill(', 'kind': 'f', 'abbr': 'lkill/0', 'dup': 1}, {'word': 'load_textfile(', 'kind': 'f', 'abbr': 'load_textfile/1', 'dup': 1}, {'word': 'lock(', 'kind': 'f', 'abbr': 'lock/2', 'dup': 1}, {'word': 'lock(', 'kind': 'f', 'abbr': 'lock/4', 'dup': 1}, {'word': 'lock_table(', 'kind': 'f', 'abbr': 'lock_table/2', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object/1', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object/3', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object/5', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'move_table_copy(', 'kind': 'f', 'abbr': 'move_table_copy/3', 'dup': 1}, {'word': 'ms(', 'kind': 'f', 'abbr': 'ms/0', 'dup': 1}, {'word': 'next(', 'kind': 'f', 'abbr': 'next/2', 'dup': 1}, {'word': 'next(', 'kind': 'f', 'abbr': 'next/4', 'dup': 1}, {'word': 'prev(', 'kind': 'f', 'abbr': 'prev/2', 'dup': 1}, {'word': 'prev(', 'kind': 'f', 'abbr': 'prev/4', 'dup': 1}, {'word': 'put_activity_id(', 'kind': 'f', 'abbr': 'put_activity_id/1', 'dup': 1}, {'word': 'raw_table_info(', 'kind': 'f', 'abbr': 'raw_table_info/2', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read/2', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read/1', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read/3', 'dup': 1}, {'word': 'read(', 'kind': 'f', 'abbr': 'read/5', 'dup': 1}, {'word': 'read_lock_table(', 'kind': 'f', 'abbr': 'read_lock_table/1', 'dup': 1}, {'word': 'read_table_property(', 'kind': 'f', 'abbr': 'read_table_property/2', 'dup': 1}, {'word': 'remote_dirty_match_object(', 'kind': 'f', 'abbr': 'remote_dirty_match_object/2', 'dup': 1}, {'word': 'remote_dirty_select(', 'kind': 'f', 'abbr': 'remote_dirty_select/2', 'dup': 1}, {'word': 'report_event(', 'kind': 'f', 'abbr': 'report_event/1', 'dup': 1}, {'word': 'restore(', 'kind': 'f', 'abbr': 'restore/2', 'dup': 1}, {'word': 's_delete(', 'kind': 'f', 'abbr': 's_delete/1', 'dup': 1}, {'word': 's_delete_object(', 'kind': 'f', 'abbr': 's_delete_object/1', 'dup': 1}, {'word': 's_write(', 'kind': 'f', 'abbr': 's_write/1', 'dup': 1}, {'word': 'schema(', 'kind': 'f', 'abbr': 'schema/0', 'dup': 1}, {'word': 'schema(', 'kind': 'f', 'abbr': 'schema/1', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/2', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/3', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/5', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/4', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/6', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select/1', 'dup': 1}, {'word': 'select_cont(', 'kind': 'f', 'abbr': 'select_cont/3', 'dup': 1}, {'word': 'set_debug_level(', 'kind': 'f', 'abbr': 'set_debug_level/1', 'dup': 1}, {'word': 'set_master_nodes(', 'kind': 'f', 'abbr': 'set_master_nodes/1', 'dup': 1}, {'word': 'set_master_nodes(', 'kind': 'f', 'abbr': 'set_master_nodes/2', 'dup': 1}, {'word': 'snmp_close_table(', 'kind': 'f', 'abbr': 'snmp_close_table/1', 'dup': 1}, {'word': 'snmp_get_mnesia_key(', 'kind': 'f', 'abbr': 'snmp_get_mnesia_key/2', 'dup': 1}, {'word': 'snmp_get_next_index(', 'kind': 'f', 'abbr': 'snmp_get_next_index/2', 'dup': 1}, {'word': 'snmp_get_row(', 'kind': 'f', 'abbr': 'snmp_get_row/2', 'dup': 1}, {'word': 'snmp_open_table(', 'kind': 'f', 'abbr': 'snmp_open_table/2', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start/0', 'dup': 1}, {'word': 'start(', 'kind': 'f', 'abbr': 'start/1', 'dup': 1}, {'word': 'stop(', 'kind': 'f', 'abbr': 'stop/0', 'dup': 1}, {'word': 'subscribe(', 'kind': 'f', 'abbr': 'subscribe/1', 'dup': 1}, {'word': 'sync_dirty(', 'kind': 'f', 'abbr': 'sync_dirty/1', 'dup': 1}, {'word': 'sync_dirty(', 'kind': 'f', 'abbr': 'sync_dirty/2', 'dup': 1}, {'word': 'sync_transaction(', 'kind': 'f', 'abbr': 'sync_transaction/1', 'dup': 1}, {'word': 'sync_transaction(', 'kind': 'f', 'abbr': 'sync_transaction/2', 'dup': 1}, {'word': 'sync_transaction(', 'kind': 'f', 'abbr': 'sync_transaction/3', 'dup': 1}, {'word': 'system_info(', 'kind': 'f', 'abbr': 'system_info/1', 'dup': 1}, {'word': 'system_info(', 'kind': 'f', 'abbr': 'system_info/0', 'dup': 1}, {'word': 'table(', 'kind': 'f', 'abbr': 'table/1', 'dup': 1}, {'word': 'table(', 'kind': 'f', 'abbr': 'table/2', 'dup': 1}, {'word': 'table_info(', 'kind': 'f', 'abbr': 'table_info(Tab, Item) -> any()', 'dup': 1}, {'word': 'table_info(', 'kind': 'f', 'abbr': 'table_info/4', 'dup': 1}, {'word': 'transaction(', 'kind': 'f', 'abbr': 'transaction/1', 'dup': 1}, {'word': 'transaction(', 'kind': 'f', 'abbr': 'transaction/2', 'dup': 1}, {'word': 'transaction(', 'kind': 'f', 'abbr': 'transaction/3', 'dup': 1}, {'word': 'transform_table(', 'kind': 'f', 'abbr': 'transform_table/3', 'dup': 1}, {'word': 'transform_table(', 'kind': 'f', 'abbr': 'transform_table/4', 'dup': 1}, {'word': 'traverse_backup(', 'kind': 'f', 'abbr': 'traverse_backup/4', 'dup': 1}, {'word': 'traverse_backup(', 'kind': 'f', 'abbr': 'traverse_backup/6', 'dup': 1}, {'word': 'uninstall_fallback(', 'kind': 'f', 'abbr': 'uninstall_fallback/0', 'dup': 1}, {'word': 'uninstall_fallback(', 'kind': 'f', 'abbr': 'uninstall_fallback/1', 'dup': 1}, {'word': 'unsubscribe(', 'kind': 'f', 'abbr': 'unsubscribe/1', 'dup': 1}, {'word': 'wait_for_tables(', 'kind': 'f', 'abbr': 'wait_for_tables/2', 'dup': 1}, {'word': 'wread(', 'kind': 'f', 'abbr': 'wread/1', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write/1', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write/3', 'dup': 1}, {'word': 'write(', 'kind': 'f', 'abbr': 'write/5', 'dup': 1}, {'word': 'write_lock_table(', 'kind': 'f', 'abbr': 'write_lock_table/1', 'dup': 1}, {'word': 'write_table_property(', 'kind': 'f', 'abbr': 'write_table_property/2', 'dup': 1}]}
{'ets': [{'word': 'all(', 'kind': 'f', 'abbr': 'all() -> [Tab]', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Tab) -> true', 'dup': 1}, {'word': 'delete(', 'kind': 'f', 'abbr': 'delete(Tab, Key) -> true', 'dup': 1}, {'word': 'delete_all_objects(', 'kind': 'f', 'abbr': 'delete_all_objects(Tab) -> true', 'dup': 1}, {'word': 'delete_object(', 'kind': 'f', 'abbr': 'delete_object(Tab, Object) -> true', 'dup': 1}, {'word': 'file2tab(', 'kind': 'f', 'abbr': 'file2tab(Filename) -> {ok, Tab} | {error, Reason}', 'dup': 1}, {'word': 'file2tab(', 'kind': 'f', 'abbr': 'file2tab(Filename, Options) -> {ok, Tab} | {error, Reason}', 'dup': 1}, {'word': 'filter(', 'kind': 'f', 'abbr': 'filter(Tn, F, A) -> [term()]', 'dup': 1}, {'word': 'first(', 'kind': 'f', 'abbr': 'first(Tab) -> Key | ''$end_of_table''', 'dup': 1}, {'word': 'foldl(', 'kind': 'f', 'abbr': 'foldl(Function, Acc0, Tab) -> Acc1', 'dup': 1}, {'word': 'foldr(', 'kind': 'f', 'abbr': 'foldr(Function, Acc0, Tab) -> Acc1', 'dup': 1}, {'word': 'from_dets(', 'kind': 'f', 'abbr': 'from_dets(Tab, DetsTab) -> true', 'dup': 1}, {'word': 'fun2ms(', 'kind': 'f', 'abbr': 'fun2ms(LiteralFun) -> MatchSpec', 'dup': 1}, {'word': 'give_away(', 'kind': 'f', 'abbr': 'give_away(Tab, Pid, GiftData) -> true', 'dup': 1}, {'word': 'i(', 'kind': 'f', 'abbr': 'i() -> ok', 'dup': 1}, {'word': 'i(', 'kind': 'f', 'abbr': 'i(Tab) -> ok', 'dup': 1}, {'word': 'i(', 'kind': 'f', 'abbr': 'i(Tab, Height) -> ok', 'dup': 1}, {'word': 'i(', 'kind': 'f', 'abbr': 'i(Tab, Height, Width) -> ok', 'dup': 1}, {'word': 'info(', 'kind': 'f', 'abbr': 'info(Tab) -> InfoList | undefined', 'dup': 1}, {'word': 'info(', 'kind': 'f', 'abbr': 'info(Tab, Item) -> Value | undefined', 'dup': 1}, {'word': 'init_table(', 'kind': 'f', 'abbr': 'init_table(Tab, InitFun) -> true', 'dup': 1}, {'word': 'insert(', 'kind': 'f', 'abbr': 'insert(Tab, ObjectOrObjects) -> true', 'dup': 1}, {'word': 'insert_new(', 'kind': 'f', 'abbr': 'insert_new(Tab, ObjectOrObjects) -> boolean()', 'dup': 1}, {'word': 'is_compiled_ms(', 'kind': 'f', 'abbr': 'is_compiled_ms(Term) -> boolean()', 'dup': 1}, {'word': 'last(', 'kind': 'f', 'abbr': 'last(Tab) -> Key | ''$end_of_table''', 'dup': 1}, {'word': 'lookup(', 'kind': 'f', 'abbr': 'lookup(Tab, Key) -> [Object]', 'dup': 1}, {'word': 'lookup_element(', 'kind': 'f', 'abbr': 'lookup_element(Tab, Key, Pos) -> Elem', 'dup': 1}, {'word': 'match(', 'kind': 'f', 'abbr': 'match(Tab, Pattern) -> [Match]', 'dup': 1}, {'word': 'match(', 'kind': 'f', 'abbr': 'match(Tab, Pattern, Limit) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'match(', 'kind': 'f', 'abbr': 'match(Continuation) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'match_delete(', 'kind': 'f', 'abbr': 'match_delete(Tab, Pattern) -> true', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object(Tab, Pattern) -> [Object]', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object(Tab, Pattern, Limit) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'match_object(', 'kind': 'f', 'abbr': 'match_object(Continuation) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'match_spec_compile(', 'kind': 'f', 'abbr': 'match_spec_compile(MatchSpec) -> CompiledMatchSpec', 'dup': 1}, {'word': 'match_spec_run(', 'kind': 'f', 'abbr': 'match_spec_run(List, CompiledMatchSpec) -> list()', 'dup': 1}, {'word': 'match_spec_run_r(', 'kind': 'f', 'abbr': 'match_spec_run_r(List, CompiledMatchSpec, X3) -> list()', 'dup': 1}, {'word': 'member(', 'kind': 'f', 'abbr': 'member(Tab, Key) -> boolean()', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/0', 'dup': 1}, {'word': 'module_info(', 'kind': 'f', 'abbr': 'module_info/1', 'dup': 1}, {'word': 'new(', 'kind': 'f', 'abbr': 'new(Name, Options) -> tid() | atom()', 'dup': 1}, {'word': 'next(', 'kind': 'f', 'abbr': 'next(Tab, Key1) -> Key2 | ''$end_of_table''', 'dup': 1}, {'word': 'prev(', 'kind': 'f', 'abbr': 'prev(Tab, Key1) -> Key2 | ''$end_of_table''', 'dup': 1}, {'word': 'rename(', 'kind': 'f', 'abbr': 'rename(Tab, Name) -> Name', 'dup': 1}, {'word': 'repair_continuation(', 'kind': 'f', 'abbr': 'repair_continuation(Continuation, MatchSpec) -> Continuation', 'dup': 1}, {'word': 'safe_fixtable(', 'kind': 'f', 'abbr': 'safe_fixtable(Tab, Fix) -> true', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select(Tab, MatchSpec) -> [Match]', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select(Tab, MatchSpec, Limit) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'select(', 'kind': 'f', 'abbr': 'select(Continuation) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'select_count(', 'kind': 'f', 'abbr': 'select_count(Tab, MatchSpec) -> NumMatched', 'dup': 1}, {'word': 'select_delete(', 'kind': 'f', 'abbr': 'select_delete(Tab, MatchSpec) -> NumDeleted', 'dup': 1}, {'word': 'select_reverse(', 'kind': 'f', 'abbr': 'select_reverse(Tab, MatchSpec) -> [Match]', 'dup': 1}, {'word': 'select_reverse(', 'kind': 'f', 'abbr': 'select_reverse(Tab, MatchSpec, Limit) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'select_reverse(', 'kind': 'f', 'abbr': 'select_reverse(Continuation) -> {[Match], Continuation} | ''$end_of_table''', 'dup': 1}, {'word': 'setopts(', 'kind': 'f', 'abbr': 'setopts(Tab, Opts) -> true', 'dup': 1}, {'word': 'slot(', 'kind': 'f', 'abbr': 'slot(Tab, I) -> [Object] | ''$end_of_table''', 'dup': 1}, {'word': 'tab2file(', 'kind': 'f', 'abbr': 'tab2file(Tab, Filename) -> ok | {error, Reason}', 'dup': 1}, {'word': 'tab2file(', 'kind': 'f', 'abbr': 'tab2file(Tab, Filename, Options) -> ok | {error, Reason}', 'dup': 1}, {'word': 'tab2list(', 'kind': 'f', 'abbr': 'tab2list(Tab) -> [Object]', 'dup': 1}, {'word': 'tabfile_info(', 'kind': 'f', 'abbr': 'tabfile_info(Filename) -> {ok, TableInfo} | {error, Reason}', 'dup': 1}, {'word': 'table(', 'kind': 'f', 'abbr': 'table(Tab) -> QueryHandle', 'dup': 1}, {'word': 'table(', 'kind': 'f', 'abbr': 'table(Tab, Options) -> QueryHandle', 'dup': 1}, {'word': 'test_ms(', 'kind': 'f', 'abbr': 'test_ms(Tuple, MatchSpec) -> {ok, Result} | {error, Errors}', 'dup': 1}, {'word': 'to_dets(', 'kind': 'f', 'abbr': 'to_dets(Tab, DetsTab) -> DetsTab', 'dup': 1}, {'word': 'update_counter(', 'kind': 'f', 'abbr': 'update_counter(Tab, Key, UpdateOp) -> Result', 'dup': 1}, {'word': 'update_element(', 'kind': 'f', 'abbr': 'update_element(Tab, Key, ElementSpec) -> boolean()', 'dup': 1}]}
